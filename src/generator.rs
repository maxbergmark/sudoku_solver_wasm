use rand::seq::SliceRandom;
use rand::Rng;

use crate::{Error, Result};

const HARD_SUDOKUS: &[&str] = &[
    "....754..........8.8.19....3....1.6........34....6817.2.4...6.39......2.53.2.....",
    "3.........5.7.3..8....28.7.7......43...........39.41.54..3..8..1...4....968...2..",
    "3.26.9..55..73..........9.....94..........1.9....57.6...85....6........3.19.82.4.",
    "53......8..7....3.2....69.1...5..2...9.37...4...981...3...4.56.....9.........7.8.",
    "..831.9...95...16.........5...4.........8..49..6.72........1.3....24.6.7..1..82..",
    "...4..97.....516...42....1..3........7.5.8.64....7....7...3....3...9......5864..9",
    ".6.5.....72.............32.....5.637.....45.....23.18.18...9...6.3.7......4..6..3",
    "274....3.........5...6...419..3.6...1..28......6.54...........2..7...583....957..",
    "57.....69.....38...9.......8.16.........3.6..7.2....5.....6.5.1...7.2.....6.91.32",
    "..52.....4..3..7..6......1.8...2.1...4.8..5......95....83.4..7..9...6.8.5..9.2...",
    "4..5..6..2............2......2..438.....3....79....5.4....6.49..7..9381.5..1...3.",
    "...79......1.......4..5..8....8...27..9..3.......2.4.3....4.6....49.71..6..5.179.",
    ".6..1....4.37....852.64......2........9438..5.....63....43.12.....2.......5.7....",
    "13.4.....7.53.....6...2...........27...9..4.........8586.5....3.591.3.....2..4.6.",
    ".2...1.484......37.71..6.2.5............1.8.2...8.95...9..3.4......4.......9.2.6.",
    ".......2...641..3518..2......813.4.6.2....3..6........79...5.....4.....8..13....2",
    ".4....2.......7.9......6.1.87..2...49.1....28.6..3.1....68...41....7..5...59.....",
    "....3...9.489.....2..47.1..125....8.....8.71....5.........9..54.61.....3....5..7.",
    ".......6.3.6............8.5...6.5.71..5...3..1..87..429..2...142.1.8.......7.3...",
    "9.....586..8.7...44.1...3....2.1.9..8.4..51.......7.....3..87.2.........6...4...9",
    "....3297..7..45.1....8.......1.6..............29...84.5..62...7..4.....91....9.36",
    "95...3..88....2....31.......6.35..9..1...7.5.....6..1...8...3.7...2.6..9..7.....4",
    ".........3...278.11...83.....5..1.....137..6...7..4..22...6..7...4......9...3.65.",
    ".3.2.7..1...18.67...1.3..5....5..9..19...4..8...6...2.3..7..........5.8.....2...6",
    "6.......4.2.5.7..........31.1.9...6....35.1.98.......224.1.8....67.9......3.....6",
    "6...95.......618.2......1..5...16.....4...2....2..8.36.....245..4..5......34...7.",
    "2.1.7.8..46.....9..8..1..4.....5..3..3.98..51.....6.....4.97...5.........9..2.7..",
    ".9.....3.1.....8.....3127...5.64...7...73.24..8.5......26....1......43......5..6.",
    "...56.3..1.....8...24........9.......8.72...661.8.......72.6...4...8..37...1.4.9.",
    ".9..354.6..1........7....89.7.94..5.1..2.......68..7....8..4.3....6...4.6.5......",
    ".5..6..4...6247.91...19.......6..9..2......84...3....5.31.....8........6..4...25.",
    ".....1.5...4...28....82...7.....6......287....7.....9.5...7..619...6..2...2.435..",
    "..314.97.5.9.......8...2..1...9...63.....37..9..5..4...7....34.2....8.......57...",
    "....8497.6...3.......6..2....8.5.7...3.72.85...........8..471.3.....84..2..1.....",
    "...4...18....162.......5.......9.3.5..4..7.6...6..1..4.8..6..29.59...6...1....7..",
    ".76.....2.5.1...43....6..1.64..1........5...1..2.73...8.7....3..69.3...7......4..",
    "...8.6..9.69...4........7..7..9..1...3.7....2..8.4...5.....2.31...1.48...7..5.6..",
    "....98....7.1.5.2..3..4...9..75.2.........6...12.6...4....8.9..7....6431.4.......",
    ".2......8........4..7...352....5..936.8.9......5..241.7..3.......31..6.....6.8..5",
    "..1...7...4.6.9.....24.83.......5.7...3...1.4...9..263..4.9.......5.2..8.8.....2.",
    "5...4..819..63............6...26...4....71.9....9..8....8..4.6..93.8.2..1.....7..",
    "..8.4...53261.9....51..3.......7.......2.59.7.....8.6...5.3......3..4....1....38.",
    "3..6..5..2.......3..734...1592....17.8..7......19..46...6..9.........8.2...8.....",
    "2.9.3.7..4.5.6.......7..9.6.....6..7..18...2.3.....4...5......2..4.2...97.2...3..",
    "14......3.8...4.......9....5...4.3.8.....7569..1....4..9..6.8..3.5.....7.6..51...",
    "28.76.........1........8.6....1.4....5.......76..23.4.6.9..742.....8...3....9.5.7",
    "...3......9...82.....96.75..35...........4....41...89.2.4..5..9.5.1.....7...46..1",
    ".....7.8.8...564...6..1...7..35..6..7........9.....5.14....8.1......5.63..2.7...9",
    ".9..2...7.6...7..9....9.41.2.....36......45...4.7.....9..84.23......5.4.3..1.....",
    ".1....4...72....934.9...76...62.89..8....657......9....5......1..4.3......3..5...",
];

const CLUE_17_SUDOKUS: &[&str] = &[
    ".......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...",
    ".......1.4.........2...........5.6.4..8...3....1.9....3..4..2...5.1........8.7...",
    ".......12....35......6...7.7.....3.....4..8..1...........12.....8.....4..5....6..",
    ".......12..36..........7...41..2.......5..3..7.....6..28.....4....3..5...........",
    ".......12..8.3...........4.12.5..........47...6.......5.7...3.....62.......1.....",
    ".......12.4..5.........9....7.6..4.....1............5.....875..6.1...3..2........",
    ".......12.5.4............3.7..6..4....1..........8....92....8.....51.7.......3...",
    ".......123......6.....4....9.....5.......1.7..2..........35.4....14..8...6.......",
    ".......124...9...........5..7.2.....6.....4.....1.8....18..........3.7..5.2......",
    ".......125....8......7.....6..12....7.....45.....3.....3....8.....5..7...2.......",
    ".......127...6...........5..8.2.....6.....4.....1.9....19..........3.8..5.2......",
    ".......128...4...........6..9.2.....7.....4.....5.1....15..........3.9..6.2......",
    ".......1298..........6.....1..7...8.4.2.........3..6...7....3...5..4........1....",
    ".......13....3..8..7..........2.6....3....9......1....6..5..2.4...4..7..1........",
    ".......13...2............8....76.2....8...4...1.......2.....75.6..34.........8...",
    ".......13...5...7....8.2......4..9..1.7............2..89.....5..4....6......1....",
    ".......13...7...6....5.8......4..8..1.6............2..74.....5..2....4......1....",
    ".......13...7...6....5.9......4..9..1.6............2..74.....5..8....4......1....",
    ".......13...8...7....5.2......4..9..1.7............2..89.....5..4....6......1....",
    ".......13.2.5..............1.3....7....8.2.....4.........34.5..67....2......1....",
    ".......13.4.....8.2...6....6.9...4.....8........3......3.1..5......4.7.6.........",
    ".......13.4.....8.2...6....9.6...4.....8........3......3.1..5......4.7.6.........",
    ".......13.4.....9.2...7....6.7...4.....3........9......3.1..5......6.8.7.........",
    ".......13.4.....9.2...7....7.6...4.....3........9......3.1..5......6.8.7.........",
    ".......132..8.....3......7....2..6....1.......4..........4.15..68....2......7....",
    ".......134..2.....6...........46.5...1......72..5.........31.........42..8.......",
    ".......134..8.....2......7....4..9....1.......6..........5.16..38....2......7....",
    ".......14......2.38...5.......2.7....31............65.6.....7.....14.......3.....",
    ".......14....2....5.........1.8.4...7.....5.....1.........5.73...42......3....6..",
    ".......14...7.8............1.4..5......2..83.6........5...4.....3....7......9...1",
    ".......14..8..5....2...........2.7.51..............8...7....53.6..14.......2.....",
    ".......14..8..5....2...........2.8.51..............7...7....53.6..14.......2.....",
    ".......14..8..9....2...........2.8.51..............7...7....93.6..14.......2.....",
    ".......147...........5......9..14....5....72....6........9..8.56.....9..1........",
    ".......1479..........2..........36.5..1............2...6....73.2..14.......8.....",
    ".......1497..........2..........36.5..1............2...6....73.2..14.......8.....",
    ".......15...4...7.3...6....8.....2.....1.4...4..5.........236...1........7.......",
    ".......15...4...7.4........6.9...3.....1..8.....7.....5...3.2......6..4..1.......",
    ".......15...8...7.3........4.8...3.....1..4.....7.....5...4.2......9..6..1.......",
    ".......15...8...7.4........6.9...3.....1..8.....7.....5...3.2......6..4..1.......",
    ".......15...83..........2...23...8.......1....8.......1.5.4.......6..72.9........",
    ".......15...83..........2...26...8.......1....8.......1.5.4.......3..72.9........",
    ".......15...9...7.4........6.8...3.....1..8.....7.....5...3.2......6..4..1.......",
    ".......15...9...7.4........6.9...3.....1..8.....7.....5...3.2......6..4..1.......",
    ".......15...9...8.3........7.4...3.....1..4.....8.....5...4.2......7..6..1.......",
    ".......15...9...8.4........7.4...3.....1..9.....8.....5...3.2......7..6..1.......",
    ".......15.2..6..........4.8..3...9.....1..........8...15.4.........7.3..8......6.",
    ".......15.4..8..........3......4.26.5..1.7...9........3..5......8....4.....9.....",
    ".......153..6............8.6...5.2.......1..........4..1.2..7.....76.3....8......",
];

const EXTREME_SUDOKUS: &[&str] = &[
    "........8..3...4...9..2..6.....79.......612...6.5.2.7...8...5...1.....2.4.5.....3",
    "........2..8.1.9..5....3.4....1.93...6..3..8...37......4......53.1.7.8..2........",
    "..2...7...1.....6.5......18....37.......49.....41.23....3.2.9...8.....5.6.......2",
    "........7..4.2.6..8.....31......29...4..9..3...95.6....1......8..6.5.2..7......6.",
    "..4..3....7..8....2.81....6..3....9..8..2....1..7....3......45....8..9....9..5..8",
    "..6..1....5..3....9..4....7..1....2..3..9....4..5....13.....68....3..2....2..8..3",
    "........3..1..9.6..5..8.4.....9...8...867.....1....2....6..7.2..3.8..5..4.......8",
    "........5..6..87..3......9....1.7.4...7...8...4...6....9..8...3..16..4..5...2....",
    ".....5..3..9....4..81.4.......7.......4..2..68...14.3.......2...4...6..79...5..1.",
    ".....5..4.9.....2...6.7.3.....7..8....86.....13..8......3.1.6...2......54......9.",
    "........6..5..18...9...8.7....8.2.....3.1.2..4..5.3....6.....9...83..1..7.......4",
    "........9..6.1.7.24......3......12...6..2..5...28.7....3......4..8.7.6..9..1.....",
    "..6.....1.8...7.5.9...5.8.......4....4..3..2....2.8.....3.7...9.7.....8.1.....6.3",
    "........2..8..91..5......4....9.7.....7.3.8.....8.1.3..4..6...5..97..3..2........",
    "........7..2..96..8...6...3....92.....46..5...1..54.....5.4.9...3.....7.1.......8",
    ".......24..3...7..41..7...6.....3.....5.9.8.....8.5...2...4...9..7...4..96.....1.",
    ".......58..6...7..84..7...3.....1.....9.2.1.....6.9...5...8...2..7...8..23.....4.",
    "..6.......3...7..11.7.............9.3....6..5.5.8..2....3..5..6...2...4..4..9.8..",
    "........5..8..79...6..1..4....1.2.7.4...7...3.7.6......3..2..6...5...8..9.......7",
    "........6..2....4..1...798....79.....8..5......3..8.1...6....2..9...51..4.......8",
    "....6...9..6..35...4..5..7......2......8.......2.1.8....5...3...9..3..1.71......4",
    "........7..2...6...8..1..9....9.1.3.3...8...4.9...5....3..9..4...7...2..6..5.....",
    "........2..7...1...3..9..4......9.6.6...3.4.5.4...8....6..4..5...2...7..1..8.....",
    ".....6......5.8.....8.9.5......7...4..76..2...1..2..3...2...6...4..6..9.39......1",
    "..1.......5...6..16.7...........1..3...4.5.8..9..2..5...5..3..7....8..4..3.5..2..",
    "........6..9...4...1..7..8....7.1.3.1.8.3.5...3...2....8..2..1...6...9..4..3.....",
    "........7..9.5.2..1....6.8....5..6...9.....3...64.2....8.6.......4.2.9..7......61",
    "........7..1..9.8..3.6..5.9.9..25.......6....3..9...4...7....91.2.5..3..8........",
    "........6..5..8.9..3.4..7....491........8..4.5....42....1..9.5..6....4.37........",
    ".....7..8.3..2..9...84..3....6.......8.5..6..5.4..........9.8.2.1.....7.8..3..4..",
    "..9.......6...3...1...7...54...52..7.....6.4..3.9.....2......1.....2.57...48....2",
    ".....6..5.1.....2...9.3.4......7......48.9...8..4.39....7.8.3...5.....1.2.......6",
    ".....4.....2.3.....5.7....9..4..2.8..985....63.........8....79....8...6...5.1...8",
    "2.......6.5..8..1...4...9...7.3.1......82.......7.5.3...9...4...8..1..5.6.......2",
    "........6..5.3.7..2....8.1....9..8...5..8..4...87.3....1.3.......7.9.5..6.......2",
    ".....1..7....6..2.8..9..3...954....3..3...4..4......8......7..6.1..2....5..3..9..",
    "........8..3.9.4..6....7.1....5.97...3.....2...74........7....6..4.5.3..81.......",
    ".....1.....7.2.....9.6.8..5..1..7....6.9....42.9.........8...59.8....4....6.3...8",
    "........9..1...6...5..7..4....4.7.8...3.8...5.8...2....78.2..5..39...1..6........",
    "........3..1..56...9..4..7......9.5.7.......8.5.4.2....8..2..9...35..1..6........",
    "..4.....9.1...3.7.6.....2.......8....5..3..8....1.5.....2.....4.7.3...1.9...7.6..",
    ".....6.....1.2...3.3.8...7...6.....5.5.3..7..2....1.......9..4...5...98..9.4....7",
    "..8...5...4...2.9.7.......3.2...4......93.......2.1.6.5.......8.1.6...2...3...7..",
    ".....5.....3.7...8.9.8...4...5.....2.8.6..4..7...3......2...69...4...1...1.9....4",
    "..3...5...7...4.6.8.......9.4...7......45.......2.1.7.5.......3.1.7...2...9...8..",
    "........2..1...7...3..5..9......6.4...3.4.8...4.5.9....9..6..3...2...1..7....3...",
    "..8.......5...8..11.9.4........3......5..9..4.4.6...7.......6..5....4.29.2..7..3.",
    "..5...7...8...6.4.9.......2.4...3......65.......4.8.1.2.......9.1.8...3...7...5..",
    "..8...3...7...9.4.1.......2.6...4......98.......7.6.5.2.......1.9.4...6...3...8..",
    "..9...4...7.3...2.8...6...71..8....6....1..7.....56...3....5..1.4.....9...2...7..",
];

#[derive(Debug, Clone, Copy)]
pub enum Difficulty {
    Hard,
    Clue17,
    Extreme,
}

#[allow(unused)]
pub fn get_random_sudoku(difficulty: Difficulty) -> Result<String> {
    let sudokus = match difficulty {
        Difficulty::Hard => HARD_SUDOKUS,
        Difficulty::Clue17 => CLUE_17_SUDOKUS,
        Difficulty::Extreme => EXTREME_SUDOKUS,
    };
    let sudoku = sudokus
        .choose(&mut rand::thread_rng())
        .ok_or(Error::GenerateSudoku)?;
    let arr = &mut sudoku.as_bytes().to_vec();
    transmute(arr);
    Ok(String::from_utf8(arr.clone())?)
}

fn transmute(sudoku: &mut [u8]) {
    let actions = [
        swap_random_block_rows,
        swap_random_block_cols,
        swap_random_rows,
        swap_random_cols,
    ];

    for _ in 0..20 {
        let action = actions[rand::thread_rng().gen_range(0..actions.len())];
        action(sudoku);
    }
    swap_random_digits(sudoku);
}

fn swap_random_block_rows(sudoku: &mut [u8]) {
    let block1 = rand::thread_rng().gen_range(0..3);
    let block2 = rand::thread_rng().gen_range(0..3);
    swap_block_rows(sudoku, block1, block2);
}

fn swap_random_block_cols(sudoku: &mut [u8]) {
    let block1 = rand::thread_rng().gen_range(0..3);
    let block2 = rand::thread_rng().gen_range(0..3);
    swap_block_cols(sudoku, block1, block2);
}

fn swap_random_rows(sudoku: &mut [u8]) {
    let block = rand::thread_rng().gen_range(0..3);
    let row1 = rand::thread_rng().gen_range(0..3);
    let row2 = rand::thread_rng().gen_range(0..3);
    swap_rows(sudoku, block * 3 + row1, block * 3 + row2);
}

fn swap_random_cols(sudoku: &mut [u8]) {
    let block = rand::thread_rng().gen_range(0..3);
    let col1 = rand::thread_rng().gen_range(0..3);
    let col2 = rand::thread_rng().gen_range(0..3);
    swap_cols(sudoku, block * 3 + col1, block * 3 + col2);
}

fn swap_random_digits(sudoku: &mut [u8]) {
    let mut digits = (b'1'..=b'9').collect::<Vec<u8>>();
    digits.shuffle(&mut rand::thread_rng());

    for cell in sudoku.iter_mut() {
        if *cell != b'.' && *cell != b'0' {
            *cell = digits[(*cell - b'1') as usize];
        }
    }

    // let digit1 = rand::thread_rng().gen_range(1..=9);
    // let digit2 = rand::thread_rng().gen_range(1..=9);
    // swap_digits(sudoku, digit1, digit2);
}

fn swap_block_rows(sudoku: &mut [u8], block1: usize, block2: usize) {
    for row in 0..3 {
        swap_rows(sudoku, block1 * 3 + row, block2 * 3 + row);
    }
}

fn swap_block_cols(sudoku: &mut [u8], block1: usize, block2: usize) {
    for col in 0..3 {
        swap_cols(sudoku, block1 * 3 + col, block2 * 3 + col);
    }
}

fn swap_rows(sudoku: &mut [u8], row1: usize, row2: usize) {
    for col in 0..9 {
        swap(sudoku, (row1, col), (row2, col));
    }
}

fn swap_cols(sudoku: &mut [u8], col1: usize, col2: usize) {
    for row in 0..9 {
        swap(sudoku, (row, col1), (row, col2));
    }
}

fn swap(sudoku: &mut [u8], (row1, col1): (usize, usize), (row2, col2): (usize, usize)) {
    let idx1 = row1 * 9 + col1;
    let idx2 = row2 * 9 + col2;
    sudoku.swap(idx1, idx2);
}

#[cfg(test)]
#[allow(clippy::panic_in_result_fn)]
mod tests {
    use crate::Result;
    use rust_sudoku_solver::{solver, Sudoku};
    use std::{collections::HashSet, str::FromStr};

    use super::*;

    fn test_swap_and_solve(input: &str) {
        let arr = &mut input.as_bytes().to_vec();
        transmute(arr);
        let res = String::from_utf8(arr.clone())
            .ok()
            .and_then(|s| Sudoku::from_str(&s).ok())
            .and_then(|s| solver::solve(s).ok());
        assert!(res.is_some());
    }

    #[test]
    fn test_all_sudokus() {
        for sudoku in EXTREME_SUDOKUS {
            test_swap_and_solve(sudoku);
        }
    }

    #[test]
    fn test_solve_random_sudokus() -> Result<()> {
        for _ in 0..1_000 {
            let sudoku = get_random_sudoku(Difficulty::Hard)?;
            let s = Sudoku::from_str(&sudoku)?;
            let solution = solver::solve(s)?;
            assert!(solution.is_solved());
        }
        Ok(())
    }

    #[test]
    fn test_number_of_sudokus() -> Result<()> {
        let mut unique = HashSet::new();
        for _ in 0..1_000 {
            let s = get_random_sudoku(Difficulty::Clue17)?;
            unique.insert(s);
        }
        assert_eq!(unique.len(), 1_000);
        Ok(())
    }
}
