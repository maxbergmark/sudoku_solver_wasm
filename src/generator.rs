use rand::Rng;

use crate::Result;

const SUDOKUS: &[&str] = &[
    "....754..........8.8.19....3....1.6........34....6817.2.4...6.39......2.53.2.....",
    "3.........5.7.3..8....28.7.7......43...........39.41.54..3..8..1...4....968...2..",
    "3.26.9..55..73..........9.....94..........1.9....57.6...85....6........3.19.82.4.",
    "53......8..7....3.2....69.1...5..2...9.37...4...981...3...4.56.....9.........7.8.",
    "..831.9...95...16.........5...4.........8..49..6.72........1.3....24.6.7..1..82..",
    "...4..97.....516...42....1..3........7.5.8.64....7....7...3....3...9......5864..9",
    ".6.5.....72.............32.....5.637.....45.....23.18.18...9...6.3.7......4..6..3",
    "274....3.........5...6...419..3.6...1..28......6.54...........2..7...583....957..",
    "57.....69.....38...9.......8.16.........3.6..7.2....5.....6.5.1...7.2.....6.91.32",
    "..52.....4..3..7..6......1.8...2.1...4.8..5......95....83.4..7..9...6.8.5..9.2...",
    "4..5..6..2............2......2..438.....3....79....5.4....6.49..7..9381.5..1...3.",
    "...79......1.......4..5..8....8...27..9..3.......2.4.3....4.6....49.71..6..5.179.",
    ".6..1....4.37....852.64......2........9438..5.....63....43.12.....2.......5.7....",
    "13.4.....7.53.....6...2...........27...9..4.........8586.5....3.591.3.....2..4.6.",
    ".2...1.484......37.71..6.2.5............1.8.2...8.95...9..3.4......4.......9.2.6.",
    ".......2...641..3518..2......813.4.6.2....3..6........79...5.....4.....8..13....2",
    ".4....2.......7.9......6.1.87..2...49.1....28.6..3.1....68...41....7..5...59.....",
    "....3...9.489.....2..47.1..125....8.....8.71....5.........9..54.61.....3....5..7.",
    ".......6.3.6............8.5...6.5.71..5...3..1..87..429..2...142.1.8.......7.3...",
    "9.....586..8.7...44.1...3....2.1.9..8.4..51.......7.....3..87.2.........6...4...9",
    "....3297..7..45.1....8.......1.6..............29...84.5..62...7..4.....91....9.36",
    "95...3..88....2....31.......6.35..9..1...7.5.....6..1...8...3.7...2.6..9..7.....4",
    ".........3...278.11...83.....5..1.....137..6...7..4..22...6..7...4......9...3.65.",
    ".3.2.7..1...18.67...1.3..5....5..9..19...4..8...6...2.3..7..........5.8.....2...6",
    "6.......4.2.5.7..........31.1.9...6....35.1.98.......224.1.8....67.9......3.....6",
    "6...95.......618.2......1..5...16.....4...2....2..8.36.....245..4..5......34...7.",
    "2.1.7.8..46.....9..8..1..4.....5..3..3.98..51.....6.....4.97...5.........9..2.7..",
    ".9.....3.1.....8.....3127...5.64...7...73.24..8.5......26....1......43......5..6.",
    "...56.3..1.....8...24........9.......8.72...661.8.......72.6...4...8..37...1.4.9.",
    ".9..354.6..1........7....89.7.94..5.1..2.......68..7....8..4.3....6...4.6.5......",
    ".5..6..4...6247.91...19.......6..9..2......84...3....5.31.....8........6..4...25.",
    ".....1.5...4...28....82...7.....6......287....7.....9.5...7..619...6..2...2.435..",
    "..314.97.5.9.......8...2..1...9...63.....37..9..5..4...7....34.2....8.......57...",
    "....8497.6...3.......6..2....8.5.7...3.72.85...........8..471.3.....84..2..1.....",
    "...4...18....162.......5.......9.3.5..4..7.6...6..1..4.8..6..29.59...6...1....7..",
    ".76.....2.5.1...43....6..1.64..1........5...1..2.73...8.7....3..69.3...7......4..",
    "...8.6..9.69...4........7..7..9..1...3.7....2..8.4...5.....2.31...1.48...7..5.6..",
    "....98....7.1.5.2..3..4...9..75.2.........6...12.6...4....8.9..7....6431.4.......",
    ".2......8........4..7...352....5..936.8.9......5..241.7..3.......31..6.....6.8..5",
    "..1...7...4.6.9.....24.83.......5.7...3...1.4...9..263..4.9.......5.2..8.8.....2.",
    "5...4..819..63............6...26...4....71.9....9..8....8..4.6..93.8.2..1.....7..",
    "..8.4...53261.9....51..3.......7.......2.59.7.....8.6...5.3......3..4....1....38.",
    "3..6..5..2.......3..734...1592....17.8..7......19..46...6..9.........8.2...8.....",
    "2.9.3.7..4.5.6.......7..9.6.....6..7..18...2.3.....4...5......2..4.2...97.2...3..",
    "14......3.8...4.......9....5...4.3.8.....7569..1....4..9..6.8..3.5.....7.6..51...",
    "28.76.........1........8.6....1.4....5.......76..23.4.6.9..742.....8...3....9.5.7",
    "...3......9...82.....96.75..35...........4....41...89.2.4..5..9.5.1.....7...46..1",
    ".....7.8.8...564...6..1...7..35..6..7........9.....5.14....8.1......5.63..2.7...9",
    ".9..2...7.6...7..9....9.41.2.....36......45...4.7.....9..84.23......5.4.3..1.....",
    ".1....4...72....934.9...76...62.89..8....657......9....5......1..4.3......3..5...",
    "5.3.6.8...9.7..5.1.......262....7....8....7.5.6.4891.....1.4...1.......3..9......",
    "7....18..........5..3..2.1.2..5..46....7.4.....8...5.2..1..9....5.37....48..1.3..",
    ".74...5.6.968.2...............59..8....3.7...7.....6...8.6..4..1..42.763......9..",
    "....1.8.6.4...2.......5....83..7.5.99....3..2.....6.875.....6..3.19..2.5....8....",
    "...97......2....51..........9....5....1.4..6.3.659.418..........2..1..97.5.3..2.4",
    "...38.....6......9..75..6..........5.......875...71.6.2......4..4379..5...162..3.",
    "...72........1..74.67..9..1...1....9..35..1......36....9...46.76.8......2..8.3...",
    ".....5.249.....1...4.....7.48.9...1..2......6..68.....37..6.5.....1..3.286......7",
    "26473.......9.....8.....3....2....5.4.....62.6....1..8....5..341...2.7.......85.9",
    "....69.......1472..7...3.4........818....1.7...2...3..9.63.....5.....4..7..5...19",
    "...6...57.378...92.6............7........5..8..84.13....273.1.918.......4.3......",
    "........3..6...72...36.8.....2..14....1.5..9.3...9..1........8..9.1..6...5..8294.",
    "..45.................13..49.1..2........1.9.56.....73.13...657.9..3..1....74....8",
    "..1....267....193.....2..17.3...5..1.14.........7.6..54...8..7....53.....9.2.....",
    ".........1..38.64....46.9...5..16.........8.47.9...2..8.79...6.2..5....99.......3",
    "4..62..35..5.....17.....4.8.5...1...3.2.4......7...284..3.65....1..3..........9..",
    "8..7....1....3.2.4..41267......1...8..6.82...19.3.......3....6.9..4.5.........1..",
];

#[allow(unused)]
pub fn get_random_sudoku() -> Result<String> {
    let index = rand::thread_rng().gen_range(0..SUDOKUS.len());
    let arr = &mut SUDOKUS[index].as_bytes().to_vec();
    transmute(arr);
    Ok(String::from_utf8(arr.clone())?)
}

fn transmute(sudoku: &mut [u8]) {
    let actions = [
        swap_random_block_rows,
        swap_random_block_cols,
        swap_random_rows,
        swap_random_cols,
        swap_random_digits,
    ];

    for _ in 0..20 {
        let action = actions[rand::thread_rng().gen_range(0..actions.len())];
        action(sudoku);
    }
}

fn swap_random_block_rows(sudoku: &mut [u8]) {
    let block1 = rand::thread_rng().gen_range(0..3);
    let block2 = rand::thread_rng().gen_range(0..3);
    swap_block_rows(sudoku, block1, block2);
}

fn swap_random_block_cols(sudoku: &mut [u8]) {
    let block1 = rand::thread_rng().gen_range(0..3);
    let block2 = rand::thread_rng().gen_range(0..3);
    swap_block_cols(sudoku, block1, block2);
}

fn swap_random_rows(sudoku: &mut [u8]) {
    let block = rand::thread_rng().gen_range(0..3);
    let row1 = rand::thread_rng().gen_range(0..3);
    let row2 = rand::thread_rng().gen_range(0..3);
    swap_rows(sudoku, block * 3 + row1, block * 3 + row2);
}

fn swap_random_cols(sudoku: &mut [u8]) {
    let block = rand::thread_rng().gen_range(0..3);
    let col1 = rand::thread_rng().gen_range(0..3);
    let col2 = rand::thread_rng().gen_range(0..3);
    swap_cols(sudoku, block * 3 + col1, block * 3 + col2);
}

fn swap_random_digits(sudoku: &mut [u8]) {
    let digit1 = rand::thread_rng().gen_range(1..=9);
    let digit2 = rand::thread_rng().gen_range(1..=9);
    swap_digits(sudoku, digit1, digit2);
}

fn swap_block_rows(sudoku: &mut [u8], block1: usize, block2: usize) {
    for row in 0..3 {
        swap_rows(sudoku, block1 * 3 + row, block2 * 3 + row);
    }
}

fn swap_block_cols(sudoku: &mut [u8], block1: usize, block2: usize) {
    for col in 0..3 {
        swap_cols(sudoku, block1 * 3 + col, block2 * 3 + col);
    }
}

fn swap_rows(sudoku: &mut [u8], row1: usize, row2: usize) {
    for col in 0..9 {
        swap(sudoku, (row1, col), (row2, col));
    }
}

fn swap_cols(sudoku: &mut [u8], col1: usize, col2: usize) {
    for row in 0..9 {
        swap(sudoku, (row, col1), (row, col2));
    }
}

fn swap(sudoku: &mut [u8], (row1, col1): (usize, usize), (row2, col2): (usize, usize)) {
    let idx1 = row1 * 9 + col1;
    let idx2 = row2 * 9 + col2;
    sudoku.swap(idx1, idx2);
}

fn swap_digits(sudoku: &mut [u8], digit1: u8, digit2: u8) {
    for cell in sudoku.iter_mut() {
        if *cell == digit1 {
            *cell = digit2;
        } else if *cell == digit2 {
            *cell = digit1;
        }
    }
}

#[cfg(test)]
mod tests {
    use rust_sudoku_solver::{solver, Sudoku};
    use std::str::FromStr;

    use super::*;

    fn test_swap_and_solve(input: &str) {
        let arr = &mut input.as_bytes().to_vec();
        transmute(arr);
        let res = String::from_utf8(arr.clone())
            .ok()
            .and_then(|s| Sudoku::from_str(&s).ok())
            .and_then(|s| solver::solve(s).ok());
        assert!(res.is_some());
    }

    #[test]
    fn test_all_sudokus() {
        for sudoku in SUDOKUS {
            test_swap_and_solve(sudoku);
        }
    }
}
